import axios from 'axios';

// Crear instancia de axios con la URL base
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3000/api'
});

// A√±adir interceptor para peticiones (a√±adir token JWT)
api.interceptors.request.use(
  (config) => {
    console.log('üîç Enviando petici√≥n a:', config.url);
    console.log('üîç M√©todo HTTP:', config.method?.toUpperCase());
    console.log('üîç Datos enviados:', config.data);
    
    // A√±adir token de autenticaci√≥n si existe
    const token = localStorage.getItem(`${import.meta.env.VITE_STORAGE_PREFIX}token`);
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('üîë Token JWT a√±adido a la petici√≥n');
    } else {
      console.warn('‚ö†Ô∏è No hay token JWT disponible');
    }
    
    return config;
  },
  (error) => {
    console.error('‚ùå Error al enviar petici√≥n:', error);
    return Promise.reject(error);
  }
);

// A√±adir interceptor para respuestas
api.interceptors.response.use(
  (response) => {
    console.log('‚úÖ Respuesta recibida de:', response.config.url);
    console.log('‚úÖ C√≥digo de estado:', response.status);
    console.log('‚úÖ Datos recibidos:', response.data);
    return response;
  },
  (error) => {
    console.error('‚ùå Error en respuesta:', error);
    
    if (error.response) {
      // El servidor respondi√≥ con un c√≥digo de error
      console.error('‚ùå Estado de error:', error.response.status);
      console.error('‚ùå Datos de error:', error.response.data);
      
      // Si es error de autenticaci√≥n, redirigir a login
      if (error.response.status === 401) {
        console.warn('üîí Sesi√≥n expirada o no autorizada');
        localStorage.removeItem(`${import.meta.env.VITE_STORAGE_PREFIX}token`);
        localStorage.removeItem(`${import.meta.env.VITE_STORAGE_PREFIX}user`);
        window.location.href = '/login';
      }
    } else if (error.request) {
      // La petici√≥n se hizo pero no se recibi√≥ respuesta
      console.error('‚ùå No se recibi√≥ respuesta del servidor:', error.request);
    } else {
      // Error al configurar la petici√≥n
      console.error('‚ùå Error al configurar petici√≥n:', error.message);
    }
    
    return Promise.reject(error);
  }
);

export default api;