{"ast":null,"code":"import api from './api';\nconst artworkService = {\n  // Obtener todas las obras con filtros opcionales\n  getArtworks: async filters => {\n    const response = await api.get('/obras', {\n      params: filters\n    });\n    return response.data.data;\n  },\n  // Obtener obras destacadas\n  getFeaturedArtworks: async () => {\n    const response = await api.get('/obras/destacadas');\n    return response.data.data;\n  },\n  // Obtener obras por categoría\n  getArtworksByCategory: async (categoryId, onlyAvailable = false) => {\n    const response = await api.get(`/obras/categoria/${categoryId}`, {\n      params: {\n        disponibles: onlyAvailable\n      }\n    });\n    return response.data.data;\n  },\n  // Obtener obras por artista\n  getArtworksByArtist: async (artistId, onlyAvailable = false) => {\n    const response = await api.get(`/obras/artista/${artistId}`, {\n      params: {\n        disponibles: onlyAvailable\n      }\n    });\n    return response.data.data;\n  },\n  // Buscar obras\n  searchArtworks: async (term, onlyAvailable = false) => {\n    const response = await api.get(`/obras/buscar`, {\n      params: {\n        termino: term,\n        disponibles: onlyAvailable\n      }\n    });\n    return response.data.data;\n  },\n  // Obtener detalle de una obra\n  getArtworkDetail: async id => {\n    const response = await api.get(`/obras/${id}`);\n    return response.data.data;\n  },\n  // Obtener detalle de una obra por código QR\n  getArtworkByQR: async qrCode => {\n    const response = await api.get(`/obras/${qrCode}`, {\n      params: {\n        tipo: 'qr'\n      }\n    });\n    return response.data.data;\n  },\n  // Crear una nueva obra (requiere autenticación)\n  createArtwork: async artworkData => {\n    const response = await api.post('/obras', artworkData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.data;\n  },\n  // Actualizar una obra (requiere autenticación)\n  updateArtwork: async (id, artworkData) => {\n    const response = await api.put(`/obras/${id}`, artworkData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.data;\n  },\n  // Actualizar el estado de una obra (disponible, destacado)\n  updateArtworkStatus: async (id, disponible, destacado) => {\n    await api.patch(`/obras/${id}/estado`, {\n      disponible,\n      destacado\n    });\n  },\n  // Eliminar una obra (requiere autenticación)\n  deleteArtwork: async id => {\n    await api.delete(`/obras/${id}`);\n  }\n};\nexport default artworkService;","map":{"version":3,"names":["api","artworkService","getArtworks","filters","response","get","params","data","getFeaturedArtworks","getArtworksByCategory","categoryId","onlyAvailable","disponibles","getArtworksByArtist","artistId","searchArtworks","term","termino","getArtworkDetail","id","getArtworkByQR","qrCode","tipo","createArtwork","artworkData","post","headers","updateArtwork","put","updateArtworkStatus","disponible","destacado","patch","deleteArtwork","delete"],"sources":["/Users/santiserrano/Documents/GitHub/galeria-virual/galeria-virtual-frontend/src/services/artworkService.ts"],"sourcesContent":["import api from './api';\nimport { Artwork, ArtworkDetailResponse, ArtworkFilters } from '../types/artwork';\n\nconst artworkService = {\n  // Obtener todas las obras con filtros opcionales\n  getArtworks: async (filters?: ArtworkFilters): Promise<Artwork[]> => {\n    const response = await api.get('/obras', { params: filters });\n    return response.data.data;\n  },\n  \n  // Obtener obras destacadas\n  getFeaturedArtworks: async (): Promise<Artwork[]> => {\n    const response = await api.get('/obras/destacadas');\n    return response.data.data;\n  },\n  \n  // Obtener obras por categoría\n  getArtworksByCategory: async (categoryId: number, onlyAvailable: boolean = false): Promise<Artwork[]> => {\n    const response = await api.get(`/obras/categoria/${categoryId}`, {\n      params: { disponibles: onlyAvailable }\n    });\n    return response.data.data;\n  },\n  \n  // Obtener obras por artista\n  getArtworksByArtist: async (artistId: number, onlyAvailable: boolean = false): Promise<Artwork[]> => {\n    const response = await api.get(`/obras/artista/${artistId}`, {\n      params: { disponibles: onlyAvailable }\n    });\n    return response.data.data;\n  },\n  \n  // Buscar obras\n  searchArtworks: async (term: string, onlyAvailable: boolean = false): Promise<Artwork[]> => {\n    const response = await api.get(`/obras/buscar`, {\n      params: { termino: term, disponibles: onlyAvailable }\n    });\n    return response.data.data;\n  },\n  \n  // Obtener detalle de una obra\n  getArtworkDetail: async (id: number): Promise<ArtworkDetailResponse> => {\n    const response = await api.get(`/obras/${id}`);\n    return response.data.data;\n  },\n  \n  // Obtener detalle de una obra por código QR\n  getArtworkByQR: async (qrCode: string): Promise<ArtworkDetailResponse> => {\n    const response = await api.get(`/obras/${qrCode}`, {\n      params: { tipo: 'qr' }\n    });\n    return response.data.data;\n  },\n  \n  // Crear una nueva obra (requiere autenticación)\n  createArtwork: async (artworkData: FormData): Promise<Artwork> => {\n    const response = await api.post('/obras', artworkData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.data;\n  },\n  \n  // Actualizar una obra (requiere autenticación)\n  updateArtwork: async (id: number, artworkData: FormData): Promise<Artwork> => {\n    const response = await api.put(`/obras/${id}`, artworkData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.data;\n  },\n  \n  // Actualizar el estado de una obra (disponible, destacado)\n  updateArtworkStatus: async (id: number, disponible?: boolean, destacado?: boolean): Promise<void> => {\n    await api.patch(`/obras/${id}/estado`, { disponible, destacado });\n  },\n  \n  // Eliminar una obra (requiere autenticación)\n  deleteArtwork: async (id: number): Promise<void> => {\n    await api.delete(`/obras/${id}`);\n  },\n};\n\nexport default artworkService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}